type EducatorUser @model @auth(rules: [{allow: public}]) {
  id: ID!
  User: User @hasOne
  School: School @hasOne
  OwnedGroups: [Group] @manyToMany(relationName: "EducatorUserGroup")
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  email: AWSEmail!
  avatar: AWSURL
  type: UserType!
  Actions: [Action] @hasMany(indexName: "byUser", fields: ["id"])
  total_points: Float!
  total_g_co2_saved: Float!
}

type StudentUser @model @auth(rules: [{allow: public}]) {
  id: ID!
  User: User @hasOne
  School: School @hasOne
  JoinedGroups: [Group] @manyToMany(relationName: "StudentUserGroup")
}

type School @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  city: String
  country: String
}

type Group @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String!
  image: AWSURL
  studentusers: [StudentUser] @manyToMany(relationName: "StudentUserGroup")
  educatorusers: [EducatorUser] @manyToMany(relationName: "EducatorUserGroup")
}

enum UserType {
  STUDENT
  EDUCATOR
  ADMINISTRATOR
  DEVELOPER
  USER
}

type SubmittedAction @model @auth(rules: [{allow: public}]) {
  id: ID!
  Action: Action @hasOne
  FactBonusPointQuiz: FactBonusPointQuiz @hasOne
  User: User @hasOne
}

type Action @model @auth(rules: [{allow: public}]) {
  id: ID!
  date_of_action: AWSDate!
  image: AWSURL
  points_received: Float!
  g_co2_saved: Float!
  userID: ID! @index(name: "byUser")
}

type FactBonusPointQuiz @model @auth(rules: [{allow: public}]) {
  id: ID!
  fact_text: String!
  question_text: String!
  answers: [String!]!
  correct_answer: String!
}
 